//# _____ #################################################################################################### _____ #//
//  \ | /                                             -- T L B --                                              \ | /  //
//   \|/      NOTE: FOR STRUCTURES RELATED TO THE SMART CONTRACTS SCROLL TO THE END OF THE FILE RIGHT AWAY!     \|/   //
//    v                                (it may save your moral health, really)                                   v    //
//###   ########################################################################################################   ###//
// mandatory basic block.tlb structures (make linter happy)

unit$_ = Unit; true$_ = True; bool_false$0 = Bool; bool_true$1 = Bool; bool_false$0 = BoolFalse; bool_true$1 = BoolTrue;
nothing$0 {X:Type} = Maybe X; just$1 {X:Type} value:X = Maybe X; left$0 {X:Type} {Y:Type} value:X = Either X Y;
right$1 {X:Type} {Y:Type} value:Y = Either X Y; pair$_ {X:Type} {Y:Type} first:X second:Y = Both X Y; bit$_ (## 1) = Bit;
hm_edge#_ {n:#} {X:Type} {l:#} {m:#} label:(HmLabel ~l n) {n = (~m) + l} node:(HashmapNode m X) = Hashmap n X;
hmn_leaf#_ {X:Type} value:X = HashmapNode 0 X;
hmn_fork#_ {n:#} {X:Type} left:^(Hashmap n X) right:^(Hashmap n X) = HashmapNode (n + 1) X;
hml_short$0 {m:#} {n:#} len:(Unary ~n) {n <= m} s:(n * Bit) = HmLabel ~n m;
hml_long$10 {m:#} n:(#<= m) s:(n * Bit) = HmLabel ~n m; hml_same$11 {m:#} v:Bit n:(#<= m) = HmLabel ~n m;
ahm_edge#_ {n:#} {X:Type} {Y:Type} {l:#} {m:#} label:(HmLabel ~l n) {n = (~m) + l} node:(HashmapAugNode m X Y) = HashmapAug n X Y;
ahmn_leaf#_ {X:Type} {Y:Type} extra:Y value:X = HashmapAugNode 0 X Y; ahmn_fork#_ {n:#} {X:Type} {Y:Type} left:^(HashmapAug n X Y)
  right:^(HashmapAug n X Y) extra:Y = HashmapAugNode (n + 1) X Y; ahme_empty$0 {n:#} {X:Type} {Y:Type} extra:Y = HashmapAugE n X Y;
ahme_root$1 {n:#} {X:Type} {Y:Type} root:^(HashmapAug n X Y) extra:Y = HashmapAugE n X Y;
unary_zero$0 = Unary ~0; unary_succ$1 {n:#} x:(Unary ~n) = Unary ~(n + 1);
hme_empty$0 {n:#} {X:Type} = HashmapE n X; hme_root$1 {n:#} {X:Type} root:^(Hashmap n X) = HashmapE n X;
addr_none$00 = MsgAddressExt; addr_extern$01 len:(## 9) external_address:(bits len) = MsgAddressExt;
anycast_info$_ depth:(#<= 30) { depth >= 1 } rewrite_pfx:(bits depth) = Anycast;
addr_std$10 anycast:(Maybe Anycast) workchain_id:int8 address:bits256 = MsgAddressInt;
addr_var$11 anycast:(Maybe Anycast) addr_len:(## 9) workchain_id:int32 address:(bits addr_len) = MsgAddressInt;
_ _:MsgAddressInt = MsgAddress; _ _:MsgAddressExt = MsgAddress;
var_uint$_ {n:#} len:(#< n) value:(uint (len * 8)) = VarUInteger n; nanograms$_ amount:(VarUInteger 16) = Grams;
var_int$_ {n:#} len:(#< n) value:(int (len * 8)) = VarInteger n; _ grams:Grams = Coins;
extra_currencies$_ dict:(HashmapE 32 (VarUInteger 32)) = ExtraCurrencyCollection;
currencies$_ grams:Grams other:ExtraCurrencyCollection = CurrencyCollection;
!merkle_update#02 {X:Type} old_hash:bits256 new_hash:bits256 old:^X new:^X = MERKLE_UPDATE X;
update_hashes#72 {X:Type} old_hash:bits256 new_hash:bits256 = HASH_UPDATE X;
!merkle_proof#03 {X:Type} virtual_hash:bits256 depth:uint16 virtual_root:^X = MERKLE_PROOF X;

//####################################################################################################################//
// other mandatory not-so-basic block.tlb structures (make me sad)

int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddressInt dest:MsgAddressInt value:CurrencyCollection
ihr_fee:Grams fwd_fee:Grams created_lt:uint64 created_at:uint32 = CommonMsgInfo;
ext_in_msg_info$10 src:MsgAddressExt dest:MsgAddressInt import_fee:Grams = CommonMsgInfo;
ext_out_msg_info$11 src:MsgAddressInt dest:MsgAddressExt created_lt:uint64 created_at:uint32 = CommonMsgInfo;
int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress dest:MsgAddressInt value:CurrencyCollection
ihr_fee:Grams fwd_fee:Grams created_lt:uint64 created_at:uint32 = CommonMsgInfoRelaxed;
ext_out_msg_info$11 src:MsgAddress dest:MsgAddressExt created_lt:uint64 created_at:uint32 = CommonMsgInfoRelaxed;
tick_tock$_ tick:Bool tock:Bool = TickTock; interm_addr_regular$0 use_dest_bits:(#<= 96) = IntermediateAddress;
_ split_depth:(Maybe (## 5)) special:(Maybe TickTock) code:(Maybe ^Cell) data:(Maybe ^Cell) library:(Maybe ^Cell) = StateInit;
message$_ {X:Type} info:CommonMsgInfo init:(Maybe (Either StateInit ^StateInit)) body:(Either X ^X) = Message X;
interm_addr_simple$10 workchain_id:int8 addr_pfx:uint64 = IntermediateAddress;
interm_addr_ext$11 workchain_id:int32 addr_pfx:uint64 = IntermediateAddress;
msg_envelope#4 cur_addr:IntermediateAddress next_addr:IntermediateAddress fwd_fee_remaining:Grams msg:^(Message Any) = MsgEnvelope;
_ enqueued_lt:uint64 out_msg:^MsgEnvelope = EnqueuedMsg; _ (HashmapAugE 352 EnqueuedMsg uint64) = OutMsgQueue;
_ messages:(HashmapE 64 EnqueuedMsg) count:uint48 = AccountDispatchQueue;
_ (HashmapAugE 256 AccountDispatchQueue uint64) = DispatchQueue;
out_msg_queue_extra#0 dispatch_queue:DispatchQueue out_queue_size:(Maybe uint48) = OutMsgQueueExtra;
processed_upto$_ last_msg_lt:uint64 last_msg_hash:bits256 = ProcessedUpto; _ (HashmapE 96 ProcessedUpto) = ProcessedInfo;
_ out_queue:OutMsgQueue proc_info:ProcessedInfo extra:(Maybe OutMsgQueueExtra) = OutMsgQueueInfo;
shard_ident$00 shard_pfx_bits:(#<= 60) workchain_id:int32 shard_prefix:uint64 = ShardIdent;
storage_used$_ cells:(VarUInteger 7) bits:(VarUInteger 7) public_cells:(VarUInteger 7) = StorageUsed;
storage_used_short$_ cells:(VarUInteger 7) bits:(VarUInteger 7) = StorageUsedShort;
storage_info$_ used:StorageUsed last_paid:uint32 due_payment:(Maybe Grams) = StorageInfo;
account_uninit$00 = AccountState; account_active$1 _:StateInit = AccountState; account_frozen$01 state_hash:bits256 = AccountState;
account_storage$_ last_trans_lt:uint64 balance:CurrencyCollection state:AccountState = AccountStorage;
account_none$0 = Account; account$1 addr:MsgAddressInt storage_stat:StorageInfo storage:AccountStorage = Account;
account_descr$_ account:^Account last_trans_hash:bits256 last_trans_lt:uint64 = ShardAccount;
depth_balance$_ split_depth:(#<= 30) balance:CurrencyCollection = DepthBalanceInfo;
_ (HashmapAugE 256 ShardAccount DepthBalanceInfo) = ShardAccounts; capabilities#c4 version:uint32 capabilities:uint64 = GlobalVersion;
shared_lib_descr$00 lib:^Cell publishers:(Hashmap 256 True) = LibDescr; master_info$_ master:ExtBlkRef = BlkMasterInfo;
ext_blk_ref$_ end_lt:uint64 seq_no:uint32 root_hash:bits256 file_hash:bits256 = ExtBlkRef;
prev_blk_info$_ prev:ExtBlkRef = BlkPrevInfo 0; prev_blks_info$_ prev1:^ExtBlkRef prev2:^ExtBlkRef = BlkPrevInfo 1;
value_flow#b8e48dfb ^[ from_prev_blk:CurrencyCollection to_next_blk:CurrencyCollection imported:CurrencyCollection
exported:CurrencyCollection ] fees_collected:CurrencyCollection ^[ fees_imported:CurrencyCollection recovered:CurrencyCollection
created:CurrencyCollection minted:CurrencyCollection ] = ValueFlow;
value_flow_v2#3ebf98b7 ^[ from_prev_blk:CurrencyCollection to_next_blk:CurrencyCollection imported:CurrencyCollection
exported:CurrencyCollection ] fees_collected:CurrencyCollection burned:CurrencyCollection ^[ fees_imported:CurrencyCollection
recovered:CurrencyCollection created:CurrencyCollection minted:CurrencyCollection ] = ValueFlow;
_ ShardStateUnsplit = ShardState; split_state#5f327da5 left:^ShardStateUnsplit right:^ShardStateUnsplit = ShardState;
msg_import_ext$000 msg:^(Message Any) transaction:^Transaction = InMsg;
msg_import_ihr$010 msg:^(Message Any) transaction:^Transaction ihr_fee:Grams proof_created:^Cell = InMsg;
msg_import_imm$011 in_msg:^MsgEnvelope transaction:^Transaction fwd_fee:Grams = InMsg;
msg_import_fin$100 in_msg:^MsgEnvelope transaction:^Transaction fwd_fee:Grams = InMsg;
msg_import_tr$101  in_msg:^MsgEnvelope out_msg:^MsgEnvelope transit_fee:Grams = InMsg;
msg_discard_fin$110 in_msg:^MsgEnvelope transaction_id:uint64 fwd_fee:Grams = InMsg;
msg_discard_tr$111 in_msg:^MsgEnvelope transaction_id:uint64 fwd_fee:Grams proof_delivered:^Cell = InMsg;
msg_import_deferred_fin$00100 in_msg:^MsgEnvelope transaction:^Transaction fwd_fee:Grams = InMsg;
msg_import_deferred_tr$00101 in_msg:^MsgEnvelope out_msg:^MsgEnvelope = InMsg;
import_fees$_ fees_collected:Grams value_imported:CurrencyCollection = ImportFees;
_ (HashmapAugE 256 InMsg ImportFees) = InMsgDescr;
msg_export_ext$000 msg:^(Message Any) transaction:^Transaction = OutMsg;
msg_export_imm$010 out_msg:^MsgEnvelope transaction:^Transaction reimport:^InMsg = OutMsg;
msg_export_new$001 out_msg:^MsgEnvelope transaction:^Transaction = OutMsg;
msg_export_tr$011  out_msg:^MsgEnvelope imported:^InMsg = OutMsg;
msg_export_deq$1100 out_msg:^MsgEnvelope import_block_lt:uint63 = OutMsg;
msg_export_deq_short$1101 msg_env_hash:bits256 next_workchain:int32 next_addr_pfx:uint64 import_block_lt:uint64 = OutMsg;
msg_export_tr_req$111 out_msg:^MsgEnvelope imported:^InMsg = OutMsg;
msg_export_deq_imm$100 out_msg:^MsgEnvelope reimport:^InMsg = OutMsg;
msg_export_new_defer$10100 out_msg:^MsgEnvelope transaction:^Transaction = OutMsg;
msg_export_deferred_tr$10101  out_msg:^MsgEnvelope imported:^InMsg = OutMsg;
_ enqueued_lt:uint64 out_msg:^MsgEnvelope = EnqueuedMsg; _ (HashmapAugE 256 OutMsg CurrencyCollection) = OutMsgDescr;
_ (HashmapAugE 352 EnqueuedMsg uint64) = OutMsgQueue;
bt_leaf$0 {X:Type} leaf:X = BinTree X;
bt_fork$1 {X:Type} left:^(BinTree X) right:^(BinTree X) = BinTree X;
fsm_none$0 = FutureSplitMerge;
fsm_split$10 split_utime:uint32 interval:uint32 = FutureSplitMerge;
fsm_merge$11 merge_utime:uint32 interval:uint32 = FutureSplitMerge;
shard_descr#b seq_no:uint32 reg_mc_seqno:uint32 start_lt:uint64 end_lt:uint64 root_hash:bits256 file_hash:bits256
  before_split:Bool before_merge:Bool want_split:Bool want_merge:Bool nx_cc_updated:Bool flags:(## 3) { flags = 0 }
  next_catchain_seqno:uint32 next_validator_shard:uint64 min_ref_mc_seqno:uint32 gen_utime:uint32
  split_merge_at:FutureSplitMerge fees_collected:CurrencyCollection funds_created:CurrencyCollection = ShardDescr;
shard_descr_new#a seq_no:uint32 reg_mc_seqno:uint32 start_lt:uint64 end_lt:uint64 root_hash:bits256 file_hash:bits256
  before_split:Bool before_merge:Bool want_split:Bool want_merge:Bool nx_cc_updated:Bool flags:(## 3) { flags = 0 }
  next_catchain_seqno:uint32 next_validator_shard:uint64 min_ref_mc_seqno:uint32 gen_utime:uint32
  split_merge_at:FutureSplitMerge ^[ fees_collected:CurrencyCollection funds_created:CurrencyCollection ] = ShardDescr;
_ (HashmapE 32 ^(BinTree ShardDescr)) = ShardHashes;
_ fees:CurrencyCollection create:CurrencyCollection = ShardFeeCreated;
_ (HashmapAugE 96 ShardFeeCreated ShardFeeCreated) = ShardFees;
ed25519_pubkey#8e81278a pubkey:bits256 = SigPubKey; ed25519_signature#5 R:bits256 s:bits256 = CryptoSignatureSimple;
_ CryptoSignatureSimple = CryptoSignature; sig_pair$_ node_id_short:bits256 sign:CryptoSignature = CryptoSignaturePair;
_ config_addr:bits256 config:^(Hashmap 32 ^Cell) = ConfigParams;
validator_info$_ validator_list_hash_short:uint32 catchain_seqno:uint32 nx_cc_updated:Bool = ValidatorInfo;
validator_base_info$_ validator_list_hash_short:uint32 catchain_seqno:uint32 = ValidatorBaseInfo;
_ key:Bool max_end_lt:uint64 = KeyMaxLt; _ key:Bool blk_ref:ExtBlkRef = KeyExtBlkRef;
_ (HashmapAugE 32 KeyExtBlkRef KeyMaxLt) = OldMcBlocksInfo;
counters#_ last_updated:uint32 total:uint64 cnt2048:uint64 cnt65536:uint64 = Counters;
creator_info#4 mc_blocks:Counters shard_blocks:Counters = CreatorStats;
block_create_stats#17 counters:(HashmapE 256 CreatorStats) = BlockCreateStats;
block_create_stats_ext#34 counters:(HashmapAugE 256 CreatorStats uint32) = BlockCreateStats;

// ---------------------------------------------------------------------------------------------------------------------

tr_phase_storage$_ storage_fees_collected:Grams storage_fees_due:(Maybe Grams) status_change:AccStatusChange = TrStoragePhase;
acst_unchanged$0 = AccStatusChange; acst_frozen$10 = AccStatusChange; acst_deleted$11 = AccStatusChange;
tr_phase_credit$_ due_fees_collected:(Maybe Grams)  credit:CurrencyCollection = TrCreditPhase;
tr_phase_compute_skipped$0 reason:ComputeSkipReason = TrComputePhase;
tr_phase_compute_vm$1 success:Bool msg_state_used:Bool account_activated:Bool gas_fees:Grams
  ^[ gas_used:(VarUInteger 7) gas_limit:(VarUInteger 7) gas_credit:(Maybe (VarUInteger 3)) mode:int8
  exit_code:int32 exit_arg:(Maybe int32) vm_steps:uint32 vm_init_state_hash:bits256 vm_final_state_hash:bits256 ] = TrComputePhase;
cskip_no_state$00 = ComputeSkipReason; cskip_bad_state$01 = ComputeSkipReason;
cskip_no_gas$10 = ComputeSkipReason; cskip_suspended$110 = ComputeSkipReason;
tr_phase_action$_ success:Bool valid:Bool no_funds:Bool status_change:AccStatusChange total_fwd_fees:(Maybe Grams)
  total_action_fees:(Maybe Grams) result_code:int32 result_arg:(Maybe int32) tot_actions:uint16 spec_actions:uint16
  skipped_actions:uint16 msgs_created:uint16 action_list_hash:bits256 tot_msg_size:StorageUsedShort = TrActionPhase;
tr_phase_bounce_negfunds$00 = TrBouncePhase; tr_phase_bounce_nofunds$01 msg_size:StorageUsedShort req_fwd_fees:Grams = TrBouncePhase;
tr_phase_bounce_ok$1 msg_size:StorageUsedShort msg_fees:Grams fwd_fees:Grams = TrBouncePhase;
trans_ord$0000 credit_first:Bool storage_ph:(Maybe TrStoragePhase) credit_ph:(Maybe TrCreditPhase) compute_ph:TrComputePhase
  action:(Maybe ^TrActionPhase)  aborted:Bool bounce:(Maybe TrBouncePhase) destroyed:Bool = TransactionDescr;
trans_storage$0001 storage_ph:TrStoragePhase = TransactionDescr;
trans_tick_tock$001 is_tock:Bool storage_ph:TrStoragePhase compute_ph:TrComputePhase action:(Maybe ^TrActionPhase)
  aborted:Bool destroyed:Bool = TransactionDescr;
split_merge_info$_ cur_shard_pfx_len:(## 6) acc_split_depth:(## 6) this_addr:bits256 sibling_addr:bits256 = SplitMergeInfo;
trans_split_prepare$0100 split_info:SplitMergeInfo storage_ph:(Maybe TrStoragePhase) compute_ph:TrComputePhase
  action:(Maybe ^TrActionPhase) aborted:Bool destroyed:Bool = TransactionDescr;
trans_split_install$0101 split_info:SplitMergeInfo prepare_transaction:^Transaction installed:Bool = TransactionDescr;
trans_merge_prepare$0110 split_info:SplitMergeInfo storage_ph:TrStoragePhase aborted:Bool = TransactionDescr;
trans_merge_install$0111 split_info:SplitMergeInfo prepare_transaction:^Transaction storage_ph:(Maybe TrStoragePhase)
  credit_ph:(Maybe TrCreditPhase) compute_ph:TrComputePhase action:(Maybe ^TrActionPhase) aborted:Bool destroyed:Bool
  = TransactionDescr;
acc_state_uninit$00 = AccountStatus; acc_state_frozen$01 = AccountStatus;
acc_state_active$10 = AccountStatus; acc_state_nonexist$11 = AccountStatus;

// ---------------------------------------------------------------------------------------------------------------------

transaction$0111 account_addr:bits256 lt:uint64
  prev_trans_hash:bits256 prev_trans_lt:uint64 now:uint32
  outmsg_cnt:uint15
  orig_status:AccountStatus end_status:AccountStatus
  ^[ in_msg:(Maybe ^(Message Any)) out_msgs:(HashmapE 15 ^(Message Any)) ]
  total_fees:CurrencyCollection state_update:^(HASH_UPDATE Account)
  description:^TransactionDescr = Transaction;

acc_trans#5 account_addr:bits256 transactions:(HashmapAug 64 ^Transaction CurrencyCollection)
            state_update:^(HASH_UPDATE Account) = AccountBlock;

_ (HashmapAugE 256 AccountBlock CurrencyCollection) = ShardAccountBlocks;

//####################################################################################################################//
// high-level used block.tlb structures

block#11ef55aa global_id:int32
  info:^BlockInfo value_flow:^ValueFlow
  state_update:^(MERKLE_UPDATE ShardState)
  extra:^BlockExtra = Block;

block_info#9bc7a987 version:uint32
  not_master:(## 1)
  after_merge:(## 1) before_split:(## 1)
  after_split:(## 1)
  want_split:Bool want_merge:Bool
  key_block:Bool vert_seqno_incr:(## 1)
  flags:(## 8) { flags <= 1 }
  seq_no:# vert_seq_no:# { vert_seq_no >= vert_seqno_incr }
  { prev_seq_no:# } { ~prev_seq_no + 1 = seq_no }
  shard:ShardIdent gen_utime:uint32
  start_lt:uint64 end_lt:uint64
  gen_validator_list_hash_short:uint32
  gen_catchain_seqno:uint32
  min_ref_mc_seqno:uint32
  prev_key_block_seqno:uint32
  gen_software:flags . 0?GlobalVersion
  master_ref:not_master?^BlkMasterInfo
  prev_ref:^(BlkPrevInfo after_merge)
  prev_vert_ref:vert_seqno_incr?^(BlkPrevInfo 0)
  = BlockInfo;

shard_state#9023afe2 global_id:int32
  shard_id:ShardIdent
  seq_no:uint32 vert_seq_no:#
  gen_utime:uint32 gen_lt:uint64
  min_ref_mc_seqno:uint32
  out_msg_queue_info:^OutMsgQueueInfo
  before_split:(## 1)
  accounts:^ShardAccounts
  ^[ overload_history:uint64 underload_history:uint64
  total_balance:CurrencyCollection
  total_validator_fees:CurrencyCollection
  libraries:(HashmapE 256 LibDescr)
  master_ref:(Maybe BlkMasterInfo) ]
  custom:(Maybe ^McStateExtra)
  = ShardStateUnsplit;

//          v- in block.tlb the constructor tag was missing!
block_extra#4a33f6fd in_msg_descr:^InMsgDescr
  out_msg_descr:^OutMsgDescr
  account_blocks:^ShardAccountBlocks
  rand_seed:bits256
  created_by:bits256
  custom:(Maybe ^McBlockExtra) = BlockExtra;

masterchain_block_extra#cca5
  key_block:(## 1)
  shard_hashes:ShardHashes
  shard_fees:ShardFees
  ^[ prev_blk_signatures:(HashmapE 16 CryptoSignaturePair)
     recover_create_msg:(Maybe ^InMsg)
     mint_msg:(Maybe ^InMsg) ]
  config:key_block?ConfigParams
= McBlockExtra;

masterchain_state_extra#cc26
  shard_hashes:ShardHashes
  config:ConfigParams
  ^[ flags:(## 16) { flags <= 1 }
     validator_info:ValidatorInfo
     prev_blocks:OldMcBlocksInfo
     after_key_block:Bool
     last_key_block:(Maybe ExtBlkRef)
     block_create_stats:(flags . 0)?BlockCreateStats ]
  global_balance:CurrencyCollection
= McStateExtra;

//####################################################################################################################//
// Types directly related to the developed smart contracts

// if True then $1, if False then $_ (nothing), can be used only in some places, but maintains binary compability
quantum_true$1  = QuantumBool;
quantum_false$_ = QuantumBool;

// A block can be presented directly or virtually (via proof)
  block_proof$_ proof:(MERKLE_PROOF Block) = BlockProof;
 direct_block$_ block:Block      = VirtBlock;
virtual_block$_ proof:BlockProof = VirtBlock;

  transaction_proof$_ proof:(MERKLE_PROOF Transaction) = TransactionProof;
 direct_transaction$_ transaction:Transaction      = VirtTransaction;
virtual_transaction$_ transaction:TransactionProof = VirtTransaction;

// Strange that it is absent in block.tlb. Used for block signing.
ton_block_id#706e0bc5 root_hash:bits256 file_hash:bits256 = TonBlockId;

// r:bits256 s:bits256, but collapsed for simplicity
blk_sig$_ signature:bits512 = BlkSig;
// signatures map: ed25519 256-bit public key -> 512-bit block signature
sig_pack$_ blockId:TonBlockId signatures:^(Hashmap 256 BlkSig) = SigPack;
// External software / script is responsible for reverting NodeIds back to PubKeys (less computation on-chain)

addr_none$00 = OptMsgAddressInt; _ MsgAddressInt = OptMsgAddressInt;

// The third-party contract author decides for themselves security level of the checks that need to be carried out
// Basic: if block or signatures absent, no additional checks are performed (only proof -> transaction check)
//        Note that only Basic security level of checks is possible in getter ("local / testing") mode on the TC SC solo.
// Advanced: if block and signatures are present then TransactionChecker SC checks proof -> transaction check, ensures
//           that provided block matches proof one (MC) or is proving it via shardProof (SC) TODO!
bpi$_ block:(Maybe ^VirtBlock) signatures:(Maybe ^SigPack) shardProof:(Maybe ^VirtBlock)
      pedantic:Bool hints:ProofHints = BlockProvingInfo;
// masterchain case: block is a MC block, signatures are "proof" for this MC block that can be checked by LiteClient SC
// TODO: workchain case: same, but shardProof is added, that is a MC block proof for SC block (`proof` for transaction)

// TransactionChecker SC can also mandate a necessary security level for processing the transaction.
// That is, if LC address is set in contract, it requires Advanced level, otherwise, only Basic level is supported.

// Formal definition of a bit string of arbitrary length. Could not find similar stuff in block.tlb.
vb_$_ = VarBits; vb_0$0 next:VarBits = VarBits; vb_1$1 next:VarBits = VarBits;

// I thought that formally I need a string of 2-bit chunks, so lets make a generic type
var_end$_ {X: Type} = VarLen X; var_item$_ {X: Type} X next:(VarLen X) = VarLen X;
_ hints:(VarLen uint2) = ProofHints;

proof_with_hints$_ proof:^VirtBlock hints:ProofHints = ProofWithHints;
// Hints allow to navigate faster without bumping on pruned branches, a string of 2-bit cell reference numbers.
// Honestly, they are much easier and less costly to generate externally. A nice optimization.

// ---------------------------------------------------------------------------------------------------------------------

_ LiteClientStorage  = AccountData;
_ LiteClientRequest  = InternalMsgBody;
_ LiteClientResponse = InternalMsgBody;

lite_client_storage$_ key_block_seq_no:uint32 key_block_time:uint32 key_block_lt:uint64 stor_global_id:int32
                      validator_keys:^(Hashmap 256 uint64) total_weight:uint64 = LiteClientStorage;
// N.B. The map contains MAIN (MC) VKs ^^^^^^^^^^^^^ map: ed25519 256-bit public key -> 64-bit validator weight

new_key_block#11a78ffe query_id:uint64 block:^VirtBlock signatures:^SigPack                      = LiteClientRequest;
  check_block#8eaa9d76 query_id:uint64 block:^VirtBlock signatures:^SigPack pedantic:QuantumBool = LiteClientRequest;
// Technically speaking, adding pedantic as such QuantumBool does not break required TLB by the contest rules, since if
// it is not included, the TLB degrades to the original once without it. Hence, quantum bool - it is true, or is absent.

     ok#ff8ff4e1 query_id:uint64 block_hash:uint256 = LiteClientResponse;
correct#ce02b807 query_id:uint64 block_hash:uint256 = LiteClientResponse;

// Smart contract friendly functions, added separately, because changing function signature may violate contest rules
check_block_ex#8eaa9111 query_id:uint64 block:^VirtBlock signatures:^SigPack
                           extra_info:^CheckBlockExInfo pedantic:Bool = LiteClientRequest;

  correct_ex#ce02b111 query_id:uint64 block_hash:uint256 extra_info:^CheckBlockExInfo = LiteClientResponse;
incorrect_ex#bad2b111 query_id:uint64 error_code:uint16  extra_info:^CheckBlockExInfo = LiteClientResponse;


transaction_checker_extra_info$_ instigator:MsgAddressInt transaction:^VirtTransaction = CheckBlockExInfo;
// N.B. Why instigator? In the good old days of Unreal Gold and Unreal Engine 1, when passing events between different
// trigger chains, an Actor (Pawn) that initially called all the chain of events (either by touching trigger, hitting
// something or doing something else) was called an Instigator (to be distinguished from Sender, who was a part of chain
// of events, but not initiated it). So I thought it would be nice and fitting to call it this way. :-)
// ---------------------------------------------------------------------------------------------------------------------

_ TransactionCheckerStorage  = AccountData;
_ TransactionCheckerRequest  = InternalMsgBody;
_ TransactionCheckerResponse = InternalMsgBody;

transaction_checker_storage$_ contract_id:uint32 lite_client_address:OptMsgAddressInt = TransactionCheckerStorage;

// Note that there is no Query ID here, for some reason, it is intended by the contest rules. So it be.
  check_transaction#91d555f7 transaction:^VirtTransaction proof:^ProofWithHints
                             current_block:^BlockProvingInfo = TransactionCheckerRequest;
transaction_checked#756adff1 transaction:^VirtTransaction = TransactionCheckerResponse;

// It is impossible to bounce right away if checking with liteClient is necessary. Thus, need additional response type.
transaction_failed_check#badadff1 transaction:^VirtTransaction error_code:uint16 = TransactionCheckerResponse;

// ---------------------------------------------------------------------------------------------------------------------
// EOF. You are too far away. Scroll up. Beware, uninitialized memoPP[v?mBy`W{.6k|;!-9sfu!IbQahb)Pv'8,lm+!6SxBBoF.z'9WSt
// JLzS.sQ5?^a0b4;<$_jR&=/sj,:*XT>*QO!p J&lNyRA+qO}+xM0;<TAD"zha7P*8Tzs{t42"?X<vh$`u;b97eZ}Vf,IW|#?amn, runaway pointer.